<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON Test</title>
    <style>
table {
  border-collapse: collapse;
}

th, td {
  border: none;
  padding: 8px;
}

.bold {
  font-weight: bold;
}
    </style>
</head>
<body>
    <p>Testing this web page, Data below is stored in the JSON file "people.json" in the 
       github repository erikstensgard.github.io. This is the main web page of the website, "index.htm"
       it is also stored in the erikstensgard.github.io repository.
       <br><a href="https://www.wikipedia.org/">Testing a link to wikipedia</a></p>
       <br><a href="OrderMenuTest.html">Order Menus</a></p>
       <br><a href="OrderMenuTest2.html">Updated Order Menus</a></p>


  <select id="filterDropdown">
  </select>

  <div id="resultContainer"></div>


<script>
// Fetch JSON Data
async function fetchData() {
  const response = await fetch('OMJSON.json');
  const data = await response.json();
  return data;
}
async function fetchOtherData() {
  const response = await fetch('ODJSON.json');
  const data = await response.json();
  return data;
}

// Populate Dropdown
function populateDropdown(data) {
  const dropdown = document.getElementById('filterDropdown');

  // Iterate over the JSON data and create an option element for each item
  data.forEach(item => {
    const option = document.createElement('option');
    option.value = item.Name;
    option.textContent = item.Name;
    dropdown.appendChild(option);
  });

  // Add an event listener to the dropdown to trigger filtering
  dropdown.addEventListener('change', filterData);
}

// Fetch JSON Data
async function fetchData() {
  const response = await fetch('OMJSON.json');
  const data = await response.json();
  return data;
}

// Fetch Other JSON Data
async function fetchOtherData() {
  const response = await fetch('ODJSON.json');
  const data = await response.json();
  return data;
}

// Populate Dropdown
function populateDropdown(data) {
  const dropdown = document.getElementById('filterDropdown');

  // Iterate over the JSON data and create an option element for each item
  data.forEach(item => {
    const option = document.createElement('option');
    option.value = item.Name;
    option.textContent = item.Name;
    dropdown.appendChild(option);
  });

  // Add an event listener to the dropdown to trigger filtering
  dropdown.addEventListener('change', filterData);
}

// Fetch JSON Data
async function fetchData() {
  const response = await fetch('OMJSON.json');
  const data = await response.json();
  return data;
}

// Fetch Other JSON Data
async function fetchOtherData() {
  const response = await fetch('ODJSON.json');
  const data = await response.json();
  return data;
}

// Populate Dropdown
function populateDropdown(data) {
  const dropdown = document.getElementById('filterDropdown');

  // Iterate over the JSON data and create an option element for each item
  data.forEach(item => {
    const option = document.createElement('option');
    option.value = item.Name;
    option.textContent = item.Name;
    dropdown.appendChild(option);
  });

  // Add an event listener to the dropdown to trigger filtering
  dropdown.addEventListener('change', filterData);
}

// Filter Data
async function filterData(event) {
  const selectedOption = event.target.value;
  const resultContainer = document.getElementById('resultContainer');

  // Clear previous results
  resultContainer.innerHTML = '';

  // Fetch the JSON data
  const jsonData = await fetchData();
  const otherData = await fetchOtherData();

  // Filter the JSON data based on the selected option
  const filteredData = jsonData.filter(item => item.Name === selectedOption);

  const table = document.createElement('table');
  table.classList.add('table');

  const tbody = document.createElement('tbody');

  // Create the table header row
  const headerRow = document.createElement('tr');

  const headerItem = document.createElement('th');
  headerItem.textContent = filteredData[0].Name; // Use the first item's Name as the header
  headerRow.appendChild(headerItem);

  tbody.appendChild(headerRow);

  // Create the table body
  filteredData.forEach(content => {
    const { Contents } = content;

    // Find the maximum row number in the Contents array
    const maxRow = Math.max(...Contents.map(item => item.Row));

    for (let row = 1; row <= maxRow; row++) {
      const bodyRow = document.createElement('tr');

      const matchingItem = Contents.find(item => item.Row === row);
      if (matchingItem) {
        const { Text, Item, Header } = matchingItem;

        let displayText = Text;

        if (!Text && Item) {
          const otherItem = otherData.find(item => item.Name === Item);
          if (otherItem) {
            displayText = otherItem.DisplayText;

            // Add click event listener to display information
            bodyRow.addEventListener('click', () => {
              displayOtherItemInfo(otherItem);
            });
            bodyRow.style.cursor = 'pointer';
          }
        }

        const displayCell = document.createElement('td');
        displayCell.textContent = displayText;

        if (Header === 1) {
          displayCell.classList.add('bold');
        }

        bodyRow.appendChild(displayCell);
      } else {
        // Add a blank cell for empty rows
        const emptyCell = document.createElement('td');
        bodyRow.appendChild(emptyCell);
      }

      tbody.appendChild(bodyRow);
    }
  });

  table.appendChild(tbody);

  resultContainer.appendChild(table);
}

// Function to display other item information
function displayOtherItemInfo(item) {
  // Display the information from the ODJSON.json file for the selected item
  console.log(item);
  // You can customize the display logic here
}

// Run the fetchData function
fetchData().then(populateDropdown);
</script>


</body>
</html>
